user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;

    server {
        listen 8080;
        server_name localhost;

        # Enable range requests globally
        add_header Accept-Ranges bytes always;

        # Root directory
        root /usr/share/nginx/html;

        # Health check endpoint
        location /health {
            add_header Content-Type application/json;
            return 200 '{"status":"ok","message":"Download test server running"}';
        }

        # Server info endpoint
        location /info {
            add_header Content-Type application/json;
            return 200 '{
                "endpoints": {
                    "/files/": "Resumable downloads with range support",
                    "/no-resume/": "Non-resumable downloads",
                    "/auth/": "Downloads requiring Authorization header",
                    "/cookie/": "Downloads requiring session cookie",
                    "/slow/": "Slow downloads for timeout testing"
                },
                "available_files": ["extra_small.txt", "small.txt", "medium.bin", "large.bin", "extra_large.bin", "mixed.bin"],
                "test_credentials": {
                    "bearer_token": "test-token-123",
                    "session_cookie": "session_id=valid-session-456"
                }
            }';
        }

        # Regular resumable downloads with range support
        location /files/ {
            alias /usr/share/nginx/html/files/;

            # Enable range requests
            add_header Accept-Ranges bytes always;

            # Add download headers
            add_header Content-Disposition 'attachment';
            add_header Cache-Control 'no-cache, no-store, must-revalidate';

            # Handle range requests properly
            try_files $uri =404;
        }

        # Non-resumable downloads (reject range requests)
        location /no-resume/ {
            alias /usr/share/nginx/html/files/;

            # Reject range requests
            if ($http_range) {
                return 416 "Range requests not supported";
            }

            add_header Content-Disposition 'attachment';
            add_header Cache-Control 'no-cache, no-store, must-revalidate';

            try_files $uri =404;
        }

        # Downloads requiring Bearer token authentication
        location /auth/ {
            alias /usr/share/nginx/html/files/;

            # Check for Authorization header
            if ($http_authorization != "Bearer test-token-123") {
                return 401 '{"error":"Unauthorized - Bearer token required"}';
            }

            add_header Accept-Ranges bytes always;
            add_header Content-Disposition 'attachment';

            try_files $uri =404;
        }

        # Downloads requiring session cookie
        location /cookie/ {
            alias /usr/share/nginx/html/files/;

            # Check for session cookie
            if ($cookie_session_id != "valid-session-456") {
                return 403 '{"error":"Forbidden - Valid session cookie required"}';
            }

            add_header Accept-Ranges bytes always;
            add_header Content-Disposition 'attachment';

            try_files $uri =404;
        }

        # Slow downloads for timeout testing
        location /slow/ {
            alias /usr/share/nginx/html/files/;

            # Limit bandwidth to 500KB/s
            limit_rate 500k;

            add_header Accept-Ranges bytes always;
            add_header Content-Disposition 'attachment';

            try_files $uri =404;
        }

        # Unstable downloads (randomly fail)
        location /unstable/ {
            alias /usr/share/nginx/html/files/;

            # Use lua or return random errors (simplified approach)
            # For full random failures, you'd need nginx-lua-module
            add_header Accept-Ranges bytes always;
            add_header Content-Disposition 'attachment';
            add_header X-Test-Note 'This endpoint may randomly fail in real implementation';

            try_files $uri =404;
        }

        # Redirect endpoint
        location /redirect/ {
            rewrite ^/redirect/(.*)$ /files/$1 redirect;
        }

        # CORS headers for API endpoints
        location ~* ^/(health|info) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Range, Content-Type" always;

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Default error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            return 404 '{"error":"File not found"}';
            add_header Content-Type application/json;
        }

        location = /50x.html {
            return 500 '{"error":"Internal server error"}';
            add_header Content-Type application/json;
        }
    }
}